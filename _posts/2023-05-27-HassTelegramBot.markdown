---
layout: post
title: "Bot do Telegram para controlar seu Home Assistant"
date: 2023-05-27 20:30:00 -0300
categories: [Automa√ß√£o Residencial, Home Assistant]
tags: telegram bot homeassistant hass assist
image: "/assets/img/HassTelegram.png"
---

> Conceitos necess√°rios:
>
> [Como obter IDs no Telegram](https://blog.gabrf.com/posts/TelegramID/)
>
> [Como fazer bots para o Telegram](https://blog.gabrf.com/posts/HowToBot/).
>
> [Introdu√ß√£o ao Home Assistant](https://blog.gabrf.com/posts/HomeAssistant/).

# Introdu√ß√£o

Ter um bot vinculado ao seu Home Assistant pode ser bastante √∫til. Eis alguns casos:

* F√°cil gest√£o de usu√°rios fora do Home Assistant

O bot pode ser habilitado para aceitar comandos de um grupo do Telegram. Desta forma, a gest√£o de quem pode ligar ou desligar as luzes, por exemplo, passa a ser a simples gest√£o de quem est√° ou n√£o no grupo.

* Controle mesmo quando o Home Assistant n√£o √© acess√≠vel pela internet

Caso o Home Assistant n√£o esteja exposto na internet, o controle pode ser feito via bot. Ou seja, mesmo que haja um firewall de operadora bloqueando o acesso ao seu Home Assistant, sua resid√™ncia pode ser gerida pelo Telegram em uma conversa. N√£o √© necess√°rio configurar redirecionamento de portas nem lidar com certificados https. Tudo funciona de maneira simples.

# Configuration.yaml

A configura√ß√£o inicial do bot deve ser feita no arquivo `configuration.yaml`, como no exemplo abaixo:

```yaml
telegram_bot:
  - platform: polling
    api_key: 158700146:AAHOPReqqTR8V7FXysa8mJCbQACUWSTBog8
    parse_mode: html
    allowed_chat_ids:
      - 9083329 # Gabriel
      - 172293282 # Bia
```

* `platform`: Maneira que o bot ir√° receber as mensagens do Telegram. As op√ß√µes s√£o `polling` ou `webhook`;
* `api_key`: Token do seu bot;
* `parse_mode`: Tipo de formata√ß√£o que seu bot usar√°. As op√ß√µes s√£o `html` ou `markdown`;
* `allowed_chat_ids`: Lista de IDs que podem usar o bot. Podem ser IDs de pessoas ou de grupos.

---

> De agora em diante, todas as configura√ß√µes do bot no Home Assistant ser√£o feitas nas <b>Automa√ß√µes</b>. Abra o Home Assistant e, no menu esquerdo, clique em `Configura√ß√µes` e em `Automa√ß√µes & Cenas`.

# Comando /start

Um bot sempre √© iniciado pelo comando `/start`. Por este motivo, recomendo que este comando esteja presente na configura√ß√£o, retornando uma mensagem de in√≠cio, uma introdu√ß√£o ao bot. Al√©m de servir como primeiro contato, o comando `/start` pode ser uma maneira f√°cil de verificar se o bot est√° funcionando.

Clique em `Criar automa√ß√£o`, `Criar nova automa√ß√£o`. No canto superior direito, clique nos tr√™s pontinhos e, em seguida, em `Editar como YAML`.

Copie e cole o c√≥digo:

{%raw%}
```yaml
alias: Telegram Comando start
description: ""
trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: /start
condition: []
action:
  - service: telegram_bot.send_message
    data:
      message: |
        <b>Home Assistant bot</b>
        ‚ÜôÔ∏è Clique em <i>Menu</i> para ver os comandos.
      target: {{ trigger.event.data.chat_id }}
mode: single
```

* `alias`: Nome da automa√ß√£o;
* `description`: Descri√ß√£o;
* `trigger`: Gatilho, o que faz a automa√ß√£o iniciar;
  * `platform`: Tipo de plataforma do gatilho;
  * `event_type`: Tipo de evento;
  * `event_data`: Dado do evento;
    * `command`: Comando;
* `condition`: Condi√ß√£o, o que impede ou n√£o a automa√ß√£o;
  * Nenhuma condi√ß√£o definida;
* `action`: A√ß√£o, o que a automa√ß√£o de fato faz;
  * `service`: Tipo de servi√ßo;
  * `data`: Dados usados na a√ß√£o;
    * `message`: Mensagem enviada. `|` √© usado para casos de m√∫ltiplas linhas;
    * `target`: Destinat√°rio da mensagem. O valor `{{ trigger.event.data.chat_id }}` faz responder no mesmo chat em que o comando foi enviado;
* `mode`: Modo de execu√ß√£o. Ou seja, se a automa√ß√£o pode ser executada em m√∫ltiplas tarefas ou n√£o.

**Pronto!** Seu bot j√° deve estar respondendo ao comando `/start`. Para criar mais comandos, duplique esta automa√ß√£o fazendo o ajuste que julgar necess√°rio.

<img src="/assets/img/HassTelegramStart.png" alt="Comando `/start`." style="width:50%">
<br><small>Comando `/start`.</small>

# Comando /luzes e exibi√ß√£o de bot√µes

Outro exemplo de comando que pode ser criado √© o que exibe e permite controlar algumas luzes usando bot√µes.

```yaml
alias: Telegram Comando Luzes
description: ""
trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: /luzes
condition: []
action:
  - service: telegram_bot.send_message
    data:
      message: <b>Controle das Luzes</b>
      target: "{{ trigger.event.data.chat_id }}"
      inline_keyboard:
        - - - >-
              Quarto teto {{ states.switch.sonoff_1000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_1000000000
        - - - >-
              Esquerda {{ states.switch.sonoff_2000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_2000000000
          - - >-
              Direita {{ states.switch.sonoff_3000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_3000000000
(...)
        - - - >-
              Escrit√≥rio {{ states.switch.sonoff_4000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_4000000000
        - - - Atualizar üîÑ
            - /atualizar
mode: single

```

<img src="/assets/img/HassTelegramLuzes.png" alt="Comando `/luzes`." style="width:50%">
<br><small>Comando `/luzes`.</small>

## Disposi√ß√£o

* `inline_keyboard`: Inicia a cria√ß√£o de bot√µes;
  * `- - -`: Indica nova linha;
  * `- -`: Indica um bot√£o na mesma linha;

## Bot√µes

Todo bot√£o tem uma mensagem exibida e um comando a ser enviado:
```yaml
        - - - >-
              Quarto teto {{ states.switch.sonoff_1000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_1000000000
```

Ou seja, este bot√£o come√ßa uma nova linha, possui a mensagem `Quarto teto üí°` e o comando `sonoff_1000000000`.
* `{{ states.switch.sonoff_1000000000 }}` representa o estado do bot√£o;
* `|replace("on", "üí°")|replace("off", "‚ö´Ô∏è")` faz o estado ser simbolizado por üí° caso esteja ligado (*on*) ou ‚ö´Ô∏è caso esteja desligado (*off*).

# Comando do bot√£o Atualizar

Diferentemente do comando de texto, o comando de um bot√£o vem em um `callback`. Os bot√µes do comando anterior exibem somente o estado de quando foram gerados. Para atualizar os estados sem que seja necess√°rio repetir o comando `/luzes`, sugiro o uso do bot√£o `Atualizar`. Crie uma nova automa√ß√£o com o seguinte conte√∫do:

```yaml
alias: Telegram Callback Atualizar
description: ""
trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      command: /atualizar
condition: []
action:
  - service: telegram_bot.answer_callback_query
    data:
      callback_query_id: "{{ trigger.event.data.id }}"
      message: |
        Atualizado em {{ now().hour }}:{{ now().minute }}:{{ now().second }}
      show_alert: true
  - service: telegram_bot.edit_message
    data:
      message_id: "{{ trigger.event.data.message.message_id }}"
      chat_id: "{{ trigger.event.data.chat_id }}"
      message: |
        <b>{{ trigger.event.data.message.text }}</b>
      inline_keyboard:
        - - - >-
              Quarto teto {{ states.switch.sonoff_1000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_1000000000
(...)
        - - - Atualizar üîÑ
            - /atualizar
mode: single

```

* `service`: Responder a chamada do bot√£o. Valor: `telegram_bot.answer_callback_query`;
* `callback_query_id`: Responder para quem clicou no bot√£o. Valor: `"{{ trigger.event.data.id }}"`;
* `show_alert`: Exibir *pop-up*. Valores poss√≠veis: `true` ou `false`.

Ou seja, sempre que o bot√£o `Atualizar` for apertado, um *pop-up* ser√° exibido confirmando a atualiza√ß√£o naquele hor√°rio e a mensagem ser√° editada para exibir os valores atuais.

<img src="/assets/img/HassTelegramLuzesPopUp.png" alt="Pop-up do bot√£o atualizar." style="width:50%">
<br><small>Pop-up do bot√£o atualizar.</small>

# Comando de bot√£o de luz

```yaml
alias: Telegram Callback
description: ""
trigger:
  - platform: event
    event_type: telegram_callback
condition: []
action:
  - service: switch.toggle
    data: {}
    target:
      entity_id: switch.{{ trigger.event.data.data }}
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 100
  - service: telegram_bot.edit_message
    data:
      message_id: "{{ trigger.event.data.message.message_id }}"
      chat_id: "{{ trigger.event.data.chat_id }}"
      message: <b>{{ trigger.event.data.message.text }}</b>
      inline_keyboard:
        - - - >-
              Quarto teto {{ states.switch.sonoff_1000000000.state|replace("on",
              "üí°")|replace("off", "‚ö´Ô∏è") }}
            - sonoff_1000000000
(...)
        - - - Atualizar üîÑ
            - /atualizar

```

O bot√£o de luz inicia tr√™s a√ß√µes em sequ√™ncia:

1. O `switch`, cujo valor vem pelo comando do bot√£o(`{{ trigger.event.data.data }}`), tem seu estado invertido (*toggle*);
2. Aguarda 100 milisegundos para que o `switch` tenha seu estado alterado;
3. Atualiza a mensagem, refazendo o seu conte√∫do com os estados atualizados.

# Comando /camera

Este comando tira uma foto da c√¢mera e a envia por Telegram. Muito √∫til para verificar rapidamente o que est√° sendo gravado.

```yaml
alias: Telegram Comando Camera
description: ""
trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: /camera
condition: []
action:
  - service: camera.snapshot
    data:
      filename: /tmp/snapshot.png
    target:
      device_id: 123456789abcdefghijklmnopqrst
  - service: telegram_bot.send_document
    data:
      authentication: digest
      file: /tmp/snapshot.png
      target: "{{ trigger.event.data.chat_id }}"
mode: single

```

As duas a√ß√µes desencadeadas pelo comando s√£o:

1. Tirar uma foto (`camera_snapshot`) usando a c√¢mera definida em `device_id` e a armazena no caminho definido em `filename`;
2. Envia a foto em formato de `documento`. A vantagem de enviar a foto como documento √© que mant√©m a qualidade original. Para enviar a foto com compress√£o, tornando o envio mais r√°pido mas com perda de qualidade, substitua `send_document` por `send_photo`. 

## Falha "*no access to path*"

Caso a pasta n√£o esteja acess√≠vel √† a√ß√£o de tirar a foto, um erro "*no access to path*" ser√° exibido no log. Para corrigir, abra o `configuration.yaml` e adicione em `homeassistant`:

```yaml
homeassistant:
(...)
  allowlist_external_dirs:
    - "/tmp"

```

# Adicionar itens √† lista de compras

Para adicionar itens √† Lista de Compras, [integra√ß√£o dispon√≠vel aqui](https://www.home-assistant.io/integrations/shopping_list/), basta enviar uma mensagem para o bot contendo o termo `comprar`.

```yaml
alias: Telegram Lista de Compras
description: ""
trigger:
  - platform: event
    event_type: telegram_text
condition:
  - condition: template
    value_template: "{{ 'comprar' in trigger.event.data.text|lower }}"
action:
  - service: shopping_list.add_item
    data:
      name: "{{ trigger.event.data.text|title|replace('Comprar', '') }}"
  - service: shopping_list.sort
    data:
      reverse: false
  - service: telegram_bot.send_message
    data:
      message: |
        <code>{{ trigger.event.data.text }}</code>
        Salvo na Lista de Compras.
      target: "{{ trigger.event.data.chat_id }}"
mode: single

```

* `condition`: Condi√ß√£o em que a a√ß√£o ser√° executada. Neste caso, ela somente ser√° executada na presen√ßa do termo `comprar`;
  * `|lower` considera a mensagem toda em min√∫sculo, facilitando a verifica√ß√£o da condi√ß√£o.

As tr√™s a√ß√µes da automa√ß√£o s√£o:

1. Adicionar o item √† lista de compras;
  * `|title`: Escreve o item em formato de t√≠tulo, ou seja, com as iniciais em mai√∫sculo;
  * `|replace('Comprar', '')`: Remove o termo "Comprar" presente na mensagem;
2. Ordena a lista de compras;
  * Por n√£o haver verifica√ß√£o de itens duplicados, faz-se necess√°ria a ordena√ß√£o alfab√©tica;
3. Envia uma mensagem confirmando que o item foi adicionado √† lista de compras.

<img src="/assets/img/HassTelegramLuzesAddToList.png" alt="Adicionando item √† lista de compras." style="width:50%">
<br><small>Adicionando item √† lista de compras.</small>

<img src="/assets/img/HassTelegramShoppingList.png" alt="Item adicionado." style="width:50%">
<br><small>Item adicionado.</small>

# Comandos usando Assist

Outra maneira de controlar o Home Assistant √© usando o [Assist](https://www.home-assistant.io/docs/assist/), usando comandos em forma de texto.

```yaml
alias: Telegram Assist
description: ""
trigger:
  - platform: event
    event_type: telegram_text
condition:
  - condition: template
    value_template: "{{ 'comprar' not in trigger.event.data.text|lower }}"
action:
  - service: conversation.process
    data:
      text: "{{ trigger.event.data.text }}"
      language: pt-br
  - service: telegram_bot.send_message
    data:
      message: |
        <code>{{ trigger.event.data.text }}</code>
        Comando enviado.
      target: "{{ trigger.event.data.chat_id }}"
      parse_mode: html
mode: single

```

Esta automa√ß√£o somente ser√° executada caso o termo `comprar` n√£o esteja presente na mensagem. Satisfeita a condi√ß√£o, √© iniciado o servi√ßo `conversation.process`.

```yaml
  - service: conversation.process
    data:
      text: "{{ trigger.event.data.text }}"
      language: pt-br
```

Este servi√ßo ir√° processar a mensagem recebida e executar o comando. Definir o idioma n√£o √© obrigat√≥rio, mas torna a a√ß√£o muito mais r√°pida, portanto, √© recomend√°vel ter o idioma ajustado.

Por fim, a a√ß√£o notifica o usu√°rio que foi executada.

<img src="/assets/img/HassTelegramAssist.png" alt="Assist em funcionamento." style="width:50%">
<br><small>Assist em funcionamento.</small>

{%endraw%}

# Menu do bot

O menu do bot n√£o √© obrigat√≥rio, mas √© recomendado por facilitar a localiza√ß√£o dos comandos dispon√≠veis. A maneira mais f√°cil de criar o menu √© falando com o [@BotFather](https://t.me/BotFather). Envie o comando `/mybots` e selecione o bot que deseja ajustar na lista. Clique em `Edit Bot` e, em seguida, em `Edit Commands`. Envie os comandos no formato `comando - Descri√ß√£o`.

<img src="/assets/img/HassTelegramBotFather.png" alt="Ajuste de comandos no BotFather." style="width:50%">
<br><small>Ajuste de comandos no BotFather.</small>

<img src="/assets/img/HassTelegramCommands.png" alt="Bot com o menu de comandos definido." style="width:50%">
<br><small>Bot com o menu de comandos definido.</small>
