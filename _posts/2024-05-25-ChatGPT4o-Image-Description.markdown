---
layout: post
title: "Descri√ß√£o autom√°tica de imagens no Telegram usando ChatGPT-4o"
date: 2024-05-25 11:00:00 -0300
categories: [Telegram, Automa√ß√£o]
tags: telegram automa√ß√£o openai descri√ß√£o acessibilidade
image: "/assets/img/ChatGPT4o.png"
---

Descri√ß√£o das duas imagens do post:

> A imagem mostra uma estrutura arquitet√¥nica ic√¥nica, possivelmente a Catedral Metropolitana de Bras√≠lia, projetada por Oscar Niemeyer. A catedral possui um design distinto, com 16 colunas de concreto que se curvam em dire√ß√£o ao c√©u, criando uma forma circular e coroada por uma cruz met√°lica. As colunas t√™m uma apar√™ncia que lembra m√£os interligadas em ora√ß√£o, simbolizando encontro e eleva√ß√£o espiritual. Na frente da estrutura, algumas pessoas est√£o reunidas na √°rea externa. O c√©u est√° parcialmente nublado, com tons alaranjados indicativos do entardecer, conferindo uma ilumina√ß√£o suave e din√¢mica √† cena.

> A imagem √© um banner promocional para um evento intitulado "Concurso Nacional Unificado". √Ä esquerda do banner, em letras grandes e azuis, l√™-se "Concurso Nacional Unificado". Na parte inferior esquerda, h√° os logos do Minist√©rio da Gest√£o e da Inova√ß√£o em Servi√ßos P√∫blicos e do Governo Federal, que inclui a bandeira do Brasil estilizada acompanhada do texto "Uni√£o e Reconstru√ß√£o". √Ä direita da imagem, h√° a foto em preto e branco de uma mulher jovem, sorrindo, segurando um caderno de prancheta. A foto dela est√° emoldurada por um contorno verde e superposta a v√°rias formas geom√©tricas coloridas, como um c√≠rculo vermelho com listras brancas e um tri√¢ngulo amarelo com um c√≠rculo azul dentro. O fundo do banner √© predominantemente branco, com detalhes coloridos nos cantos superiores esquerdo e inferior direito, seguindo um estilo moderno e vibrante.

# ChatGPT-4o

No dia 13 de Maio de 2024 a OpenAI lan√ßou a vers√£o mais nova do ChatGPT, a vers√£o 4o. Segundo a pr√≥pria OpenAI:

> GPT-4o (‚Äúo‚Äù de ‚Äúomni‚Äù) √© um passo em dire√ß√£o a uma intera√ß√£o humano-computador muito mais natural‚Äîele aceita como entrada qualquer combina√ß√£o de texto, √°udio, imagem e v√≠deo e gera qualquer combina√ß√£o de sa√≠das de texto, √°udio e imagem. Ele pode responder a entradas de √°udio em apenas 232 milissegundos, com uma m√©dia de 320 milissegundos, o que √© semelhante ao tempo de resposta humano em uma conversa. Ele iguala o desempenho do GPT-4 Turbo em texto em ingl√™s e c√≥digo, com melhorias significativas em texto em l√≠nguas n√£o inglesas, al√©m de ser muito mais r√°pido e 50% mais barato na API. O GPT-4o √© especialmente melhor na compreens√£o de vis√£o e √°udio em compara√ß√£o com os modelos existentes. [^gpt4o-texto]

Os v√≠deos do lan√ßamento s√£o impressionantes[^gpt4o-playlist]. Um v√≠deo em particular chamou minha aten√ß√£o:

<iframe width="560" height="315" src="https://www.youtube.com/embed/KwNUJ69RbwY?si=aU4TdTWlCJmbeeaF" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

# Motiva√ß√£o

Participo de um grupo no Telegram que possui, dentre suas recomenda√ß√µes e regras, a orienta√ß√£o de que descrevam todas as imagens. A meta √© que todas as pessoas sejam capazes de participar das conversas, independente de qualquer coisa. Ao assistir o v√≠deo acima, pensei: _Por que n√£o automatizar a descri√ß√£o de imagens?_

# Bot

A integra√ß√£o com um bot do Telegram foi relativamente simples. Segui o guia oficial[^guia] e funcionou de maneira excepcional. As descri√ß√µes, em sua maioria, ficam excelentes!

> Como a funcionalidade √© paga, o bot n√£o √© p√∫blico. Caso crie o seu, n√£o se esque√ßa de consultar os pre√ßos no site. [^precos]

## requirements.txt
Crie o arquivo `requirements.txt` com o conte√∫do:

```text
pyTelegramBotAPI==4.15.4
requests==2.31.0
```

Instale as depend√™ncias usando o comando:
```shell
pip install -r requirements.txt
```

## bot.py
```python
import base64
import requests
import telebot

# Valores necess√°rios ao funcionamento
BOT_TOKEN = <Token do bot>
OPENAI_KEY = <Api key da OpenAI>

# Cria bot
bot = telebot.TeleBot(BOT_TOKEN)

# Baixa a imagem e retorna o nome do arquivo
def download_photo(message):
    photo_info = bot.get_file(message.photo[-1].file_id)
    photo_download = bot.download_file(photo_info.file_path)
    photo_name = f'{photo_info.file_unique_id[:6]}.{photo_info.file_path.split(".")[-1]}'
    with open(photo_name, 'wb') as new_photo:
        new_photo.write(photo_download)
    return photo_name

# Faz o encode da imagem para base64
def encode_image(photo_name):
  with open(photo_name, "rb") as photo_file:
    return base64.b64encode(photo_file.read()).decode('utf-8')

# Gera a descri√ß√£o da foto
def describe_photo(photo_encoded):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {OPENAI_KEY}"
    }
    payload = {
        "model": "gpt-4o",
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "Descreva a imagem"
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{photo_encoded}"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 500
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
    return response.json()['choices'][0]['message']['content']

# Remove a foto do disco de armazenamento
def remove_photo(photo_name):
    os.remove(photo_name)

# Recebimento de imagens e envio de descri√ß√£o
@bot.message_handler(content_types=['photo'])
def get_photo(message):
    photo_name = download_photo(message)
    photo_encoded = encode_image(photo_name)
    description = describe_photo(photo_encoded)
    text = (
        f'üñº  <b>Descri√ß√£o autom√°tica:</b>'
        f'\n<blockquote>{description}</blockquote>'
    )
    bot.send_message(
        message.chat.id,
        text,
        parse_mode='HTML',
        reply_to_message_id=message.id
    )
    remove_photo(photo_name)

bot.infinity_polling()
```

Sendo:
* `BOT_TOKEN`: O token do seu bot, obtido no [@BotFather](https://t.me/BotFather);
* `OPENAI_KEY`: Chave de API da OpenAI, obtida em [https://platform.openai.com/api-keys](https://platform.openai.com/api-keys).

O bot √© executado pelo comando[^systemctl]:
```shell
python bot.py
```

--- 

[^gpt4o-texto]: Texto de apresenta√ß√£o: [https://openai.com/index/hello-gpt-4o/](https://openai.com/index/hello-gpt-4o/)

[^gpt4o-playlist]: Playlist de lan√ßamento do ChatGPT 4o: [https://www.youtube.com/playlist?list=PLOXw6I10VTv8VOvPNVQ8c4D4NyMRMotXh](https://www.youtube.com/playlist?list=PLOXw6I10VTv8VOvPNVQ8c4D4NyMRMotXh)

[^guia]: Guia oficial de implementa√ß√£o do Vision: [https://platform.openai.com/docs/guides/vision](https://platform.openai.com/docs/guides/vision)

[^precos]: Pre√ßos do ChatGPT 4o: [https://openai.com/api/pricing/](https://openai.com/api/pricing/)

[^systemctl]: Veja o post "[Como manter um processo rodando para sempre](/posts/Systemctl/)"
